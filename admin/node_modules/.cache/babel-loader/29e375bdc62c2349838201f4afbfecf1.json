{"ast":null,"code":"const MovieReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_MOVIES_START\":\n      return {\n        movies: [],\n        isFetching: true,\n        error: false\n      };\n\n    case \"GET_MOVIES_SUCCESS\":\n      return {\n        movies: action.payload,\n        isFetching: false,\n        error: false\n      };\n\n    case \"GET_MOVIES_FAILURE\":\n      return {\n        movies: [],\n        isFetching: false,\n        error: true\n      };\n\n    case \"CREATE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_SUCCESS\":\n      return {\n        movies: [...state.movies, action.payload],\n        isFetching: false,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"UPLOAD_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_SUCCESS\":\n      return {\n        movies: state.movies.map(movie => movie._id === action.payload._id && action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"DELETE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_SUCCESS\":\n      return {\n        movies: state.movie.filter(movie => movie.id !== action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = MovieReducer;\nexport default MovieReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieReducer\");","map":{"version":3,"sources":["D:/Nodejs/netflix/admin/src/context/movieContext/MovieReducer.js"],"names":["MovieReducer","state","action","type","movies","isFetching","error","payload","map","movie","_id","filter","id"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAO;AACLC,QAAAA,MAAM,EAAE,EADH;AAELC,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,oBAAL;AACE,aAAO;AACLF,QAAAA,MAAM,EAAEF,MAAM,CAACK,OADV;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,oBAAL;AACE,aAAO;AACLF,QAAAA,MAAM,EAAE,EADH;AAELC,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,sBAAL;AACE,aAAO;AACLF,QAAAA,MAAM,EAAE,CAAC,GAAGH,KAAK,CAACG,MAAV,EAAkBF,MAAM,CAACK,OAAzB,CADH;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,sBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,sBAAL;AACE,aAAO;AACLF,QAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAaI,GAAb,CACLC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcR,MAAM,CAACK,OAAP,CAAeG,GAA7B,IAAoCR,MAAM,CAACK,OADhD,CADH;AAILF,QAAAA,UAAU,EAAE,KAJP;AAKLC,QAAAA,KAAK,EAAE;AALF,OAAP;;AAOF,SAAK,sBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,sBAAL;AACE,aAAO;AACLF,QAAAA,MAAM,EAAEH,KAAK,CAACQ,KAAN,CAAYE,MAAZ,CAAoBF,KAAD,IAAWA,KAAK,CAACG,EAAN,KAAaV,MAAM,CAACK,OAAlD,CADH;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,sBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF;AACE,aAAO,EAAE,GAAGL;AAAL,OAAP;AA5EJ;AA8ED,CA/ED;;KAAMD,Y;AAiFN,eAAeA,YAAf","sourcesContent":["const MovieReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"GET_MOVIES_START\":\r\n      return {\r\n        movies: [],\r\n        isFetching: true,\r\n        error: false,\r\n      };\r\n    case \"GET_MOVIES_SUCCESS\":\r\n      return {\r\n        movies: action.payload,\r\n        isFetching: false,\r\n        error: false,\r\n      };\r\n    case \"GET_MOVIES_FAILURE\":\r\n      return {\r\n        movies: [],\r\n        isFetching: false,\r\n        error: true,\r\n      };\r\n    case \"CREATE_MOVIE_START\":\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        error: false,\r\n      };\r\n    case \"CREATE_MOVIE_SUCCESS\":\r\n      return {\r\n        movies: [...state.movies, action.payload],\r\n        isFetching: false,\r\n        error: false,\r\n      };\r\n    case \"CREATE_MOVIE_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        error: true,\r\n      };\r\n    case \"UPLOAD_MOVIE_START\":\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        error: false,\r\n      };\r\n    case \"UPLOAD_MOVIE_SUCCESS\":\r\n      return {\r\n        movies: state.movies.map(\r\n          (movie) => movie._id === action.payload._id && action.payload\r\n        ),\r\n        isFetching: false,\r\n        error: false,\r\n      };\r\n    case \"UPLOAD_MOVIE_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        error: true,\r\n      };\r\n    case \"DELETE_MOVIE_START\":\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        error: false,\r\n      };\r\n    case \"DELETE_MOVIE_SUCCESS\":\r\n      return {\r\n        movies: state.movie.filter((movie) => movie.id !== action.payload),\r\n        isFetching: false,\r\n        error: false,\r\n      };\r\n    case \"DELETE_MOVIE_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        error: true,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default MovieReducer;"]},"metadata":{},"sourceType":"module"}